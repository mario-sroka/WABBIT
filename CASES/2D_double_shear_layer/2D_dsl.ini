;------------------------------------------------------------
;------------ WABBIT PARAMETER FILE -------------------------
;------------------------------------------------------------
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)

; ##################################################################################
; 2D double shear layer
; - reactive navier stokes physics
; - inert gas
; - periodic boundary
; - initial conditions from WABBIT function
; - fixed mesh
;
; note: remove all unnecessary parameters from this file!
; ##################################################################################

[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes, reactive_navier_stokes]
physics_type=reactive_navier_stokes;
; decide if you want to start from a given configuration (i.e. Statevector)
; 1:true, 0:false and we start from the initial conditions dictated by the physics module
read_from_files=0;
; if read_from_files is true, WABBIT will try to start from the given files
; if input_time is non negative (negative=default value), then files are read from field_name+input time.h5
; input_files are ignored in this case
input_time=0;
; other file names for reactive navier stokes physics parameter
; additionally parameters:
reactive_parameter_file=CASES/2D_double_shear_layer/combustion.ini;
; chemistry parameters:
chemistry_parameter_file=CASES/2D_double_shear_layer/inert_gas.ini;

[Domain]
; 2D or 3D problem?
dim=2;
; box size of computational domain. [Lx Ly Lz]
domain_size=1 1 0;
; synchronization (on/off)on [x y z] domain boundaries
; (off (NON-PERIODIC): 0/false/yes | on (PERIODIC): 1/true/no)
periodic_BC=1 1 1;

[Blocks]
; size of each block, must be odd (17, 33, 65 etc),
; if given one value this is meant for all directions, or specify value for each direction
number_block_nodes=33 33;
; ghost nodes for each block. It is possible that in current versions, one can only
; set even values
number_ghost_nodes=4;
; maximum number of blocks (heavy data) per proc
number_blocks=50;
; maximal number of trees in the forest:
max_forest_size=1;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
; ACM: 3 (2D), 4 (3D)
; Convection: 1 (2D /3D)
; reactive Navier-Stokes: 4 (2D) or 5 (3D) + number of species
number_equations=4;
; treelevel bounds
max_treelevel=6;
min_treelevel=6;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=0;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;

[Time]
; final time to reach in simulation
time_max=5.0;
; maximum walltime allowed for simulations (in hours). The run will be stopped if this duration
; is exceeded. This is useful on real clusters, where the walltime of a job is limited, and the
; system kills the job regardless of whether we're done or not. If WABBIT itself ends execution,
; a backup is written and you can resume the simulation right where it stopped. Note you can also
; stop a run using the file "runtime_control" (set runtime_control=save_stop;)
walltime_max=999.9;
; wabbit can save the heavy data (flow fiels) to HDF5. What is saved depends on the physics modules
; and the section [Saving]. Here you control WHEN you want to save the output: either after a fixed
; number of time steps [fixed_freq], or after a physical time interval [fixed_time]
write_method=fixed_time;
; if write_method=fixed_time:
; write time for output
write_time=0.5;
; fixed time step. if the value is greater 0.0, then the time step is fixed no matter what.
; the setting from the physics modules, which usually decide about dt, are ignored and over-
; written. The default is 0.0, so not used. NOTE: WABBIT still will adjust dt to precisely match
; the time for saving and statistics and the final time, if any of those is not a multiple of dt_fixed.
; In that case, some time steps may be smaller in order to reach those times.
dt_fixed=0.0;
; CFL criterium (velocity). Note the time step dt is dictated by the physics modules: some eqns (like
; the heat eqn, which is not implemented) may not even have a CFL restriction.
CFL=1.0;

[Saving]
; WABBIT is in charge of saving, but what is saved is controled by the physics modules.
; here, you need to tell WABBIT how many fields are saved and how they will be labeled.
; The physics modules are then in charge of providing the respective data to WABBIT. I.e.
; if the field is called "mask", WABBIT will ask the physics module to return the array
; "mask" and then save that to disk.
; how many fields are you going to save?
N_fields_saved=5;
; how are the fields labeled?
field_names=rho Ux Uy p vort;

[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; filtering of equations. NOTE: the filters are PHYSICS MODULE SPECIFIC! Hence it depends on the module
; which values you can set here.
; cNS: [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | bogey_shock | wavelet_filter]
; ACM: [no_filter | wavelet_filter | explicit_7pt]
; ConvDiff: not implemented
; reactive navier stokes: [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | wavelet | bogey_shock | spectral]
filter_type=bogey_shock;
; filter frequency (note: set filter to no_filter if you want to disable filtering completely)
; Note our clumsy nomenclature: we mean filtering every "filter_freq" time steps
filter_freq=1;

; bogey filtering
; ---------------
; bogey shock detector threshold
r_th=1e-4;
; bogey-filter detection method
bogey_detector=divU;

[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=1;
; and every tsave physical time units (leave empty to disable)
tsave_stats=;


